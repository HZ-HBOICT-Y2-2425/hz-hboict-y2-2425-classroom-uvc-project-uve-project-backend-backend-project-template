on:
  push:
    branches:
      - release

jobs:
  build-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js (for linting, testing)
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install dependencies
        run: |
          npm install

      - name: Run Linter
        run: npm run lint

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

      - name: Build Docker Compose services
        run: |
          docker-compose build

      - name: Start services for testing
        run: |
          docker-compose up -d

      - name: Run Microservice tests
        run: |
          docker-compose exec -T microservice sh -c "if [ -f apigateway.test.js ]; then npx vitest run apigateway.test.js; else echo 'Test file not found'; fi"

      - name: Run API Gateway tests
        run: |
          docker-compose exec -T apigateway sh -c "if [ -f challenges-api.test.js ]; then npx vitest run challenges-api.test.js; else echo 'Test file not found'; fi"

      - name: Run Challenges API tests
        run: |
          docker-compose exec -T challenges-api sh -c "if [ -f shop-api.test.js ]; then npx vitest run shop-api.test.js; else echo 'Test file not found'; fi"

      - name: Run Shop API tests
        run: |
          docker-compose exec -T shop-api sh -c "if [ -f shop-api.test.js ]; then npx vitest run shop-api.test.js; else echo 'Test file not found'; fi"

      - name: Set up SonarQube Scanner
        run: |
          wget -O sonar-scanner-cli.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.7.0.2747-linux.zip
          if [ -s sonar-scanner-cli.zip ]; then
            unzip sonar-scanner-cli.zip
            echo "$(pwd)/sonar-scanner-4.7.0.2747-linux/bin" >> "$GITHUB_PATH"
          else
            echo "SonarQube scanner download failed or file is empty"
            exit 1
          fi
      - name: Test SonarQube Server Connectivity
        run: |
          curl -I $SONAR_HOST_URL
        env:
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}    

      - name: Run SonarQube Analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          sonar-scanner -X \
            -Dsonar.projectKey=YourProjectKey \
            -Dsonar.sources=. \
            -Dsonar.host.url=$SONAR_HOST_URL \
            -Dsonar.login=$SONAR_TOKEN
      - name: Tear down services
        run: |
          docker-compose down       
      

  deploy:
    needs: build-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Deploy to Production
        run: |
          # Add your deployment steps here
          echo "Deploying to production..."
          # Example: Deploy to server or cloud
          # curl -X POST -H "Authorization: Bearer ${{ secrets.PRODUCTION_API_KEY }}" https://your-deploy-endpoint.com

